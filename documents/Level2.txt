Link: https://github.com/hawkzuo/spring-master-class/tree/master/01-spring-in-depth

- Autowire:
    2 instances of SortAlgorithm, spring inject by type.
    - S1: Assign @Primary to 1 instance of SortAlgorithm
    - S2: Autowiring by name
        private final SortAlgorithm bubbleSortAlgorithm;
    - S3: @Qualifier assign "Qualifier" to each instance, then use syntax to assign
        @Component
        @Qualifier("quick")
        public class QuickSortAlgorithm implements SortAlgorithm {}

        public BinarySearchExample(@Qualifier("quick") SortAlgorithm sortAlgorithm) {
            this.sortAlgorithm = sortAlgorithm;
        }

- Bean:
    Beans[@Component] + Dependencies[@Autowired] + Usage of Beans[Application Context]
    Support [Constructor/Setter/Field] Injection on Beans
    {Basically a TP-sort order of creating classes controlled by Beans}
    Add notation @Scope() to Components
    Default scope is Singleton
    singleton - One at all time
    prototype - Newly creating each time
    Given PersonDao -> JdbcConnection:
        prototype -> singleton => Each prototype has same dependency
        singleton -> prototype => Each singleton still has same dependency
    To avoid this behavior, add Proxy to @Scope for Dependencies
        @Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE, proxyMode = ScopedProxyMode.TARGET_CLASS)
    By doing this, each time the class JdbcConnection is used, a new class is generated. So if calling twice of:
        personDao.getJdbcConnection()
    There will be two distinct JdbcConnection classes.

- Bean Lifecycle:
    @PreConstruct @PreDestroy callbacks
        javax.annotation.PostConstruct;
        javax.annotation.PreDestroy;

- SpringBootApplication:
    By default, only scan the package that the application is within.
    "Exception in thread "main" org.springframework.beans.factory.NoSuchBeanDefinitionException:
        No qualifying bean of type 'edu.tamu.amos.spring.componentscan.dao.PersonDao' available"
    To add new scanning packages, use @ComponentScan:
        @ComponentScan(basePackages = "edu.tamu.amos.spring")
    To disable, remove "spring-boot-starter" from pom.xml:
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>
		This will make "SpringApplication" "SpringBootApplication" invalid
    Instead, add "spring-core" and "spring-context" to pom.xml
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
        </dependency>
    By now this will give strong warning on "Application context not configured for this file" on Application.java
    For logger it will throw an error:
        "ERROR StatusLogger No log4j2 configuration file found. Using default configuration: logging only errors to the console.
    Set system property 'log4j2.debug' to show Log4j2 internal initialization logging."

- XML definition
    Same as learned in AWS.
    However, the default search path for XML files are at '/resources' folder. [TODO: figure out why]
    Use *.xml file to define application structure. Each Component is a "bean"
    A bean has the following attributes.
        "id"[Unique Identifier]
        "class"[Class Reference]
        "lazy-init"[True/False]
        "init-method"[Initialization Callback]
        "destroy-method"[Destruction Callback]
        "scope" [singleton prototype request session global-session]
    A bean accepts <constructor-arg> <properties>
        <property name = "" value = ""/>
        <constructor-arg ref="{id of class}"/>
    Combination of XML and Annotation Context => Use context:component-scan

- Sample log4j.properties file:
    # Define the root logger with appender file
    log4j.rootLogger = DEBUG, FILE

    # Define the file appender
    log4j.appender.FILE=org.apache.log4j.FileAppender
    # Set the name of the file
    log4j.appender.FILE.File=C:\\log.out

    # Set the immediate flush to true (default)
    log4j.appender.FILE.ImmediateFlush=true

    # Set the threshold to debug mode
    log4j.appender.FILE.Threshold=debug

    # Set the append to false, overwrite
    log4j.appender.FILE.Append=false

    # Define the layout for file appender
    log4j.appender.FILE.layout=org.apache.log4j.PatternLayout
    log4j.appender.FILE.layout.conversionPattern=%m%n

